<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.greedy.section01.xmlmapper.ElementTestMapper">

	<!-- 
		Mapper용 xml에서 사용할 수 있는 엘리먼트는 총 9가지이다.(mybatis config용 xml과 다르게 순서 상관 X)
		<cache>, <cache-ref>, <resultMap>, <parameterMap>, <sql>
		<select>, <insert>, <update>, <delete>
	 -->
	<!--  1. <cache> 엘리먼트 -->
	<!-- 
	 	cache와 cache-ref 엘리먼트는 캐시를 설정허나느 엘리먼트이다.
	 	cache는 현재 네임스페이스에 대한 캐시 설정이고, cache-ref는 다른 네임스페이스에 대한 캐시 설정 참조를
	 	할 때 사용한다.
	 	캐시란?
	 	컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다.
	 	캐시 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나, 값을 다시 계산하는 시간을 절약하고
	 	싶은 경우 사용한다.
	 	캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.
	 -->
	  
	 <!-- 
	  	디폴트 설정(cache태그를 쓰지 않아도 원래 되어 있는 설정)은 다음과 같다.
	  	1. 매퍼 XML의 모든 select 구문의 결과를 캐시한다.
	  	2. 매퍼 XML의 insert, update, delete는 모두 캐시를 지운다.
	  	3. 가장 오랫동안 사용하지 않은 캐시를 지우는 알고리즘(LRU - Least Recently Used)을 사용한다.
	  	4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
	  	5. 캐시를 리스트나 객체에 대해 최대 1024개의 참조를 저장한다.
	  	6. 캐시는 읽기/쓰기가 모두 가능하다.
	  -->
	  
	<cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>

	<select id="selectCacheTest" resultType="java.lang.String">
		SELECT
			   A.MENU_NAME
		  FROM TBL_MENU A
	</select>
	
	<!--  2. <resultMap> 엘리먼트 -->
	<!-- 
		데이터베이스를 다녀온 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
		resultMap 엘리먼트는 마이바티스에서 가장 중요하고 강력한 엘리먼트이다.
		ResultSet에서 데이터를 가져올 때 작성되는 JDBC 코드를 대부분 줄여주는 역할을 담당한다.
		사실 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요하다.
		resultMap의 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.
		
		resultMap 엘리먼트는 4가지 속성을 설정할 수 있다.
		1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 존재
		2. type : 결과 매핑을 적요하는 대상 객체 타입(매핑 구문의 결과 데이터를 저장할 자바 타입을 지정(
		3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보를 확장할 때 사용
		4. autoMapping : 결과 매핑을 자동 매핑할 것인지를 결정
	 -->
	<resultMap id="menuResultMap1" type="com.greedy.common.MenuDTO" autoMapping="false">
		<id property="code" column="MENU_CODE"/>
		<result property="name" column="MENU_NAME"/>
		<result property="price" column="MENU_PRICE"/>
		<result property="categoryCode" column="CATEGORY_CODE"/>
	</resultMap>
	<resultMap id="menuResultMap2" type="com.greedy.common.MenuDTO" extends="menuResultMap1">
	 	<!-- 추가적인 속성만 넣으면 된다. -->
	 	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
	</resultMap>
	<select id="selectResultMapTest" resultMap="menuResultMap2">
		SELECT
			   A.MENU_CODE
			 , A.MENU_NAME
			 , A.MENU_PRICE
			 , A.CATEGORY_CODE
			 , A.ORDERABLE_STATUS
		  FROM TBL_MENU A
		 WHERE A.ORDERABLE_STATUS = 'Y'
	</select>
	
	<!-- 2-1. resultMap의 하위 엘리먼트 -->
	
	<!-- 2-1-1. <constructor> -->
	<resultMap id="menuResultMap3" type="com.greedy.common.MenuDTO">
		<constructor>
			<idArg column="MENU_CODE" javaType="_int"/>
			<arg column="MENU_NAME" javaType="string"/>
			<arg column="MENU_PRICE" javaType="_int"/>
			<arg column="CATEGORY_CODE" javaType="_int"/>
			<arg column="ORDERABLE_STATUS" javaType="string"/>
		</constructor>
	</resultMap>
	<select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
		SELECT
			   A.MENU_CODE
			 , A.MENU_NAME
			 , A.MENU_PRICE
			 , A.CATEGORY_CODE
			 , A.ORDERABLE_STATUS
		  FROM TBL_MENU A
		 WHERE A.ORDERABLE_STATUS = 'Y'
	</select>
	
	<!-- 2-1-2. <association> -->
	<!-- <association>엘리먼트는 중간에 넣으면 에러가 발생한다. 따라서 resultMap의 가장 마지막 부분에 작성해야 한다. -->
	<!-- 따로 각각 resultMap을 사용하는 방법 -->
	<!-- 
	<resultMap id="menuAndCategoryResultMap" type="com.greedy.common.MenuAndCategoryDTO">
		<id property="code" column="MENU_CODE"/>
		<result property="name" column="MENU_NAME"/>
		<result property="price" column="MENU_PRICE"/>
		<result property="orderableStatus" column="ORDERABLE_STATUS"/>
		<association property="category" resultMap="categoryResultMap"/>
	</resultMap>
	<resultMap id="categoryResultMap" type="com.greedy.common.CategoryDTO">
		<id property="code" column="CATEGORY_CODE"/>
		<result property="name" column="CATEGORY_NAME"/>
		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
	</resultMap>
	 -->
	 
	<!-- <association>엘리먼트 내에 id, result를 작성하는 방법(하나의 resultMap 사용) -->
	<resultMap id="menuAndCategoryResultMap" type="com.greedy.common.MenuAndCategoryDTO">
		<id property="code" column="MENU_CODE"/>
		<result property="name" column="MENU_NAME"/>
		<result property="price" column="MENU_PRICE"/>
		<result property="orderableStatus" column="ORDERABLE_STATUS"/>
		<association property="category" javaType="com.greedy.common.CategoryDTO">
			<id property="code" column="CATEGORY_CODE"/>
			<result property="name" column="CATEGORY_NAME"/>
			<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
		</association>
	</resultMap>
	
	<select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
		SELECT
		       A.MENU_CODE
		     , A.MENU_NAME
		     , A.MENU_PRICE
		     , B.CATEGORY_CODE
  		     , B.CATEGORY_NAME
		     , B.REF_CATEGORY_CODE
		     , A.ORDERABLE_STATUS
		  FROM TBL_MENU A
		  JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
		 WHERE A.ORDERABLE_STATUS = 'Y'
	</select>
	<!-- 2-1-3. <collection> -->
	<!-- 따로 각각 만든 resultMap을 사용하는 방법 -->
	<!-- 
	<resultMap id="categoryAndMenuResultMap" type="com.greedy.common.CategoryAndMenuDTO">
		<id property="code" column="CATEGORY_CODE"/>
		<result property="name" column="CATEGORY_NAME"/>
		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
		<collection property="menuList" resultMap="menuResultMap"/>
	</resultMap>
	<resultMap id="menuResultMap" type="com.greedy.common.MenuDTO">
		<id property="code" column="MENU_CODE"/>
		<result property="name" column="MENU_NAME"/>
		<result property="price" column="MENU_PRICE"/>
		<result property="categoryCode" column="CATEGORY_CODE"/>
		<result property="orderableStatus" column="ORDERABLE_STATUS"/>
	</resultMap>
	 -->
	 
	<!-- collection 내에 id, result 작성하는 방법 -->
	<resultMap id="categoryAndMenuResultMap" type="com.greedy.common.CategoryAndMenuDTO">
		<id property="code" column="CATEGORY_CODE"/>
		<result property="name" column="CATEGORY_NAME"/>
		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
		<collection property="menuList" ofType="com.greedy.common.MenuDTO">
			<id property="code" column="MENU_CODE"/>
			<result property="name" column="MENU_NAME"/>
			<result property="price" column="MENU_PRICE"/>
			<result property="categoryCode" column="CATEGORY_CODE"/>
			<result property="orderableStatus" column="ORDERABLE_STATUS"/>
		</collection>
	</resultMap>
	
	<select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
		SELECT
		       A.CATEGORY_CODE
		     , A.CATEGORY_NAME
		     , A.REF_CATEGORY_CODE
		     , B.MENU_CODE
		     , B.MENU_NAME
		     , B.MENU_PRICE
		     , B.CATEGORY_CODE
		     , B.ORDERABLE_STATUS
		  FROM TBL_CATEGORY A
		  JOIN TBL_MENU B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
		 WHERE B.ORDERABLE_STATUS = 'Y'
	</select>
	
	<!-- 2-1-4. <discriminator> 엘리먼트 -->
	<!-- 
		마이바티스 설정에서는 resultMap 혹은 resultType 매핑 한 개만 선택할 수 있다.
		즉, 매핑 구문 아이디 별 결과 매핑은 고정되어 있는 상태이다.
		하지만 개발하다 보면 매핑 구문은 동일하지만 동적으로 결과를 매핑해야 하는 상황이 생길 수 있다.
		이러한 경우 discriminator 엘리먼트를 이용하면 매핑 과정에서 도엊ㄱ으로 결과를 매핑해 주는 기능을 제공한다.
		
		하지만 상속관계에 있는 클래스를 동적으로 처리할 때 사용하며 활용도에 비해 난이도가 높기 때문에 수업에서는 예제를 생략
	 -->
	 
	 <!-- 3.<sql> 엘리먼트 -->
	 <!-- 각 매핑 구문에서 공통으로 사용할 수 있는 SQL 문자열의 일부를 정의하고 재사용하기 위해 사용한다. -->
	 <sql id="columns">
	  	 A.MENU_CODE
	   , A.MENU_NAME
	   , A.MENU_PRICE
	   , A.CATEGORY_CODE
	   , A.ORDERABLE_STATUS
	 </sql>
	 <select id="selectSqlTest" resultMap="menuResultMap2">
	 	SELECT
		<include refid="columns"/>
		  FROM TBL_MENU A
		 WHERE A.ORDERABLE_STATUS = 'Y'
	 </select>
	 
	 <!-- 4. <insert> 엘리먼트 -->
	 <!-- 
	 	insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert 엘리먼트는 좀 더
	 	많은 속성을 정의할 수 있다.
	 	id : 매핑 구문을 구분하는 아이디이다.
	 	parameterType : 파라미터의 타입을 지정한다. 이미 정의된 별칭을 사용하거나, 클래스의 full-name을 작성해야 한다.
	 	flushCache : 매핑 구문을 실행할 때 캐시를 지울지 여부를 결정한다.
	 	timeout : sql을 실행한 후 응답을 기다리는 최대 시간, 대게는 설정하지 않고 JDBC 드라이버 자체의 타임아웃 값
	 			  (Oracle은 무한대인 상태)을 그대로 사용한다.
	 	statementType : JDBC 구문 타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중 하나를 쓸 수 있으며
	 					기본값은 PREPARED이다.
	  -->
	  <insert id="insertMenuTest" parameterType="com.greedy.common.MenuDTO">
		    INSERT
		      INTO TBL_MENU A
		    (
		      A.MENU_CODE
		    , A.MENU_NAME
		    , A.MENU_PRICE
		    , A.CATEGORY_CODE
		    , A.ORDERABLE_STATUS
		    )
		    VALUES
		    (
	  	    SEQ_MENU_CODE.NEXTVAL
	 	   , #{ name }
	 	   , #{ price }
	 	   , #{ categoryCode }
	  	   , #{ orderableStatus }
	  	   )
	</insert> 

	  
	  <insert id="insertNewCategory" parameterType="com.greedy.common.MenuAndCategoryDTO">
	  		INSERT
	  		  INTO TBL_CATEGORY A
	  		(
	  		  A.CATEGORY_CODE
	  		, A.CATEGORY_NAME
	  		, A.REF_CATEGORY_CODE
	  		)
	  		VALUES
	  		(
	  		  SEQ_CATEGORY_CODE.NEXTVAL
	  		, #{ category.name }
	  		, NULL
	  		)
	  </insert>
	  
	  <insert id="insertNewMenu" parameterType="com.greedy.common.MenuAndCategoryDTO">
	  		<selectKey keyProperty="category.code" order="BEFORE" resultType="_int">
	  		SELECT MAX(A.CATEGORY_CODE)
	  		  FROM TBL_CATEGORY A
	  		</selectKey>
	  		INSERT
		      INTO TBL_MENU A
		    (
		      A.MENU_CODE
		    , A.MENU_NAME
		    , A.MENU_PRICE
		    , A.CATEGORY_CODE
		    , A.ORDERABLE_STATUS
		    )
		    VALUES
		    (
	  	    SEQ_MENU_CODE.NEXTVAL
	 	   , #{ name }
	 	   , #{ price }
	 	   , #{ category.code }
	  	   , #{ orderableStatus }
	  	   )
	  </insert>
	  
</mapper>
